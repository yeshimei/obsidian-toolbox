/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Toolbox
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  passwordCreator: true,
  passwordCreatorMixedContent: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@$%^&*()_+",
  passwordCreatorLength: 16,
  polysemy: true
};
var ToolboxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: this.plugin.manifest.name });
    new import_obsidian.Setting(containerEl).setName("\u{1F511} \u5BC6\u7801\u521B\u5EFA\u5668").addToggle(
      (cd) => cd.setValue(this.plugin.settings.passwordCreator).onChange(async (value) => {
        this.plugin.settings.passwordCreator = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.passwordCreator) {
      new import_obsidian.Setting(containerEl).setName("\u4ECE\u54EA\u4E9B\u5B57\u7B26\u4E2D\u968F\u673A\u751F\u6210\u5BC6\u7801\uFF1F").addText(
        (cd) => cd.setValue(
          "" + this.plugin.settings.passwordCreatorMixedContent
        ).onChange(async (value) => {
          this.plugin.settings.passwordCreatorMixedContent = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u751F\u6210\u5BC6\u7801\u7684\u957F\u5EA6\uFF1F").addText(
        (cd) => cd.setValue("" + this.plugin.settings.passwordCreatorLength).onChange(async (value) => {
          this.plugin.settings.passwordCreatorLength = Number(value);
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\u{1F517} \u591A\u4E49\u7B14\u8BB0\u8F6C\u8DF3").setDesc(
      '\u5728\u7B14\u8BB0\u5C5E\u6027\u91CC\u6DFB\u52A0 to \u5B57\u6BB5\uFF0C\u4F8B\u5982 to: "[[filename or path]]"'
    ).addToggle(
      (cd) => cd.setValue(this.plugin.settings.polysemy).onChange(async (value) => {
        this.plugin.settings.polysemy = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// src/main.ts
var Toolbox = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ToolboxSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        this.polysemy(file);
      })
    );
    this.settings.passwordCreator && this.addCommand({
      id: "\u5BC6\u7801\u521B\u5EFA\u5668",
      name: "\u5BC6\u7801\u521B\u5EFA\u5668",
      callback: () => this.passwordCreator()
    });
  }
  passwordCreator() {
    const pass = this.pick(
      this.settings.passwordCreatorMixedContent.split(""),
      this.settings.passwordCreatorLength
    ).join("");
    window.navigator.clipboard.writeText(pass);
    this.notice("\u5BC6\u7801\u5DF2\u590D\u5236\u81F3\u526A\u5207\u677F\uFF01");
  }
  polysemy(file) {
    var _a, _b, _c;
    const to = (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.to;
    if (to) {
      let filename = (_c = to.match(/\[\[(.*)\]\]/)) == null ? void 0 : _c[1];
      let files = this.app.vault.getMarkdownFiles();
      let targetFile = files.find(
        ({ basename, path, extension }) => basename === filename || path.replace("." + extension, "") === filename
      );
      console.log(targetFile);
      if (targetFile) {
        const LastOpenFiles = this.app.workspace.getLastOpenFiles();
        if (LastOpenFiles[1] !== file.path) {
          const view = this.app.workspace.getLeaf(true);
          view.openFile(targetFile);
          this.notice(
            `\u300A${file.basename}\u300B\u662F\u4E00\u7BC7\u591A\u4E49\u7B14\u8BB0\uFF0C\u5DF2\u8F6C\u8DF3\u81F3\u300A${filename}\u300B `
          );
        }
      }
    }
  }
  pick(arr, n = 1, repeat = false) {
    if (n >= arr.length) {
      return arr;
    }
    let result = [];
    let picked = /* @__PURE__ */ new Set();
    for (let i = 0; i < n; i++) {
      let index = Math.floor(Math.random() * arr.length);
      if (repeat) {
        while (picked.has(index)) {
          index = Math.floor(Math.random() * arr.length);
        }
        picked.add(index);
      }
      result.push(arr[index]);
    }
    return result;
  }
  notice(text) {
    new import_obsidian2.Notice(text);
  }
  openFile(path) {
    return this.app.vault.getAbstractFileByPath(path);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
