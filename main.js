/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/js-md5/src/md5.js
var require_md5 = __commonJS({
  "node_modules/js-md5/src/md5.js"(exports, module2) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_MD5_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var EXTRA = [128, 32768, 8388608, -2147483648];
      var SHIFT = [0, 8, 16, 24];
      var OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"];
      var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      var blocks = [], buffer8;
      if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        buffer8 = new Uint8Array(buffer);
        blocks = new Uint32Array(buffer);
      }
      var isArray = Array.isArray;
      if (root.JS_MD5_NO_NODE_JS || !isArray) {
        isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      var isView = ArrayBuffer.isView;
      if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !isView)) {
        isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var formatMessage = function(message) {
        var type = typeof message;
        if (type === "string") {
          return [message, true];
        }
        if (type !== "object" || message === null) {
          throw new Error(INPUT_ERROR);
        }
        if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          return [new Uint8Array(message), false];
        }
        if (!isArray(message) && !isView(message)) {
          throw new Error(INPUT_ERROR);
        }
        return [message, false];
      };
      var createOutputMethod = function(outputType) {
        return function(message) {
          return new Md5(true).update(message)[outputType]();
        };
      };
      var createMethod = function() {
        var method = createOutputMethod("hex");
        if (NODE_JS) {
          method = nodeWrap(method);
        }
        method.create = function() {
          return new Md5();
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(type);
        }
        return method;
      };
      var nodeWrap = function(method) {
        var crypto = require("crypto");
        var Buffer2 = require("buffer").Buffer;
        var bufferFrom;
        if (Buffer2.from && !root.JS_MD5_NO_BUFFER_FROM) {
          bufferFrom = Buffer2.from;
        } else {
          bufferFrom = function(message) {
            return new Buffer2(message);
          };
        }
        var nodeMethod = function(message) {
          if (typeof message === "string") {
            return crypto.createHash("md5").update(message, "utf8").digest("hex");
          } else {
            if (message === null || message === void 0) {
              throw new Error(INPUT_ERROR);
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (isArray(message) || isView(message) || message.constructor === Buffer2) {
            return crypto.createHash("md5").update(bufferFrom(message)).digest("hex");
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };
      var createHmacOutputMethod = function(outputType) {
        return function(key, message) {
          return new HmacMd5(key, true).update(message)[outputType]();
        };
      };
      var createHmacMethod = function() {
        var method = createHmacOutputMethod("hex");
        method.create = function(key) {
          return new HmacMd5(key);
        };
        method.update = function(key, message) {
          return method.create(key).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createHmacOutputMethod(type);
        }
        return method;
      };
      function Md5(sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
          this.buffer8 = buffer8;
        } else {
          if (ARRAY_BUFFER) {
            var buffer2 = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer2);
            this.blocks = new Uint32Array(buffer2);
          } else {
            this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          }
        }
        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
      }
      Md5.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var result = formatMessage(message);
        message = result[0];
        var isString = result[1];
        var code, index = 0, i, length = message.length, blocks2 = this.blocks;
        var buffer82 = this.buffer8;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = blocks2[16];
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (isString) {
            if (ARRAY_BUFFER) {
              for (i = this.start; index < length && i < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  buffer82[i++] = code;
                } else if (code < 2048) {
                  buffer82[i++] = 192 | code >>> 6;
                  buffer82[i++] = 128 | code & 63;
                } else if (code < 55296 || code >= 57344) {
                  buffer82[i++] = 224 | code >>> 12;
                  buffer82[i++] = 128 | code >>> 6 & 63;
                  buffer82[i++] = 128 | code & 63;
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  buffer82[i++] = 240 | code >>> 18;
                  buffer82[i++] = 128 | code >>> 12 & 63;
                  buffer82[i++] = 128 | code >>> 6 & 63;
                  buffer82[i++] = 128 | code & 63;
                }
              }
            } else {
              for (i = this.start; index < length && i < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks2[i >>> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 2048) {
                  blocks2[i >>> 2] |= (192 | code >>> 6) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks2[i >>> 2] |= (224 | code >>> 12) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks2[i >>> 2] |= (240 | code >>> 18) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 12 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                }
              }
            }
          } else {
            if (ARRAY_BUFFER) {
              for (i = this.start; index < length && i < 64; ++index) {
                buffer82[i++] = message[index];
              }
            } else {
              for (i = this.start; index < length && i < 64; ++index) {
                blocks2[i >>> 2] |= message[index] << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          this.bytes += i - this.start;
          if (i >= 64) {
            this.start = i - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
      Md5.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i = this.lastByteIndex;
        blocks2[i >>> 2] |= EXTRA[i & 3];
        if (i >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = blocks2[16];
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.bytes << 3;
        blocks2[15] = this.hBytes << 3 | this.bytes >>> 29;
        this.hash();
      };
      Md5.prototype.hash = function() {
        var a, b, c, d, bc, da, blocks2 = this.blocks;
        if (this.first) {
          a = blocks2[0] - 680876937;
          a = (a << 7 | a >>> 25) - 271733879 << 0;
          d = (-1732584194 ^ a & 2004318071) + blocks2[1] - 117830708;
          d = (d << 12 | d >>> 20) + a << 0;
          c = (-271733879 ^ d & (a ^ -271733879)) + blocks2[2] - 1126478375;
          c = (c << 17 | c >>> 15) + d << 0;
          b = (a ^ c & (d ^ a)) + blocks2[3] - 1316259209;
          b = (b << 22 | b >>> 10) + c << 0;
        } else {
          a = this.h0;
          b = this.h1;
          c = this.h2;
          d = this.h3;
          a += (d ^ b & (c ^ d)) + blocks2[0] - 680876936;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks2[1] - 389564586;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks2[2] + 606105819;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks2[3] - 1044525330;
          b = (b << 22 | b >>> 10) + c << 0;
        }
        a += (d ^ b & (c ^ d)) + blocks2[4] - 176418897;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[5] + 1200080426;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[6] - 1473231341;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[7] - 45705983;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (d ^ b & (c ^ d)) + blocks2[8] + 1770035416;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[9] - 1958414417;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[10] - 42063;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[11] - 1990404162;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (d ^ b & (c ^ d)) + blocks2[12] + 1804603682;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[13] - 40341101;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[14] - 1502002290;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[15] + 1236535329;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[1] - 165796510;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[6] - 1069501632;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[11] + 643717713;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[0] - 373897302;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[5] - 701558691;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[10] + 38016083;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[15] - 660478335;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[4] - 405537848;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[9] + 568446438;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[14] - 1019803690;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[3] - 187363961;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[8] + 1163531501;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[13] - 1444681467;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[2] - 51403784;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[7] + 1735328473;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[12] - 1926607734;
        b = (b << 20 | b >>> 12) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[5] - 378558;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[8] - 2022574463;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[11] + 1839030562;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[14] - 35309556;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[1] - 1530992060;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[4] + 1272893353;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[7] - 155497632;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[10] - 1094730640;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[13] + 681279174;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[0] - 358537222;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[3] - 722521979;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[6] + 76029189;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[9] - 640364487;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[12] - 421815835;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[15] + 530742520;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[2] - 995338651;
        b = (b << 23 | b >>> 9) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[0] - 198630844;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[7] + 1126891415;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[14] - 1416354905;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[5] - 57434055;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[12] + 1700485571;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[3] - 1894986606;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[10] - 1051523;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[1] - 2054922799;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[8] + 1873313359;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[15] - 30611744;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[6] - 1560198380;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[13] + 1309151649;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[4] - 145523070;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[11] - 1120210379;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[2] + 718787259;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[9] - 343485551;
        b = (b << 21 | b >>> 11) + c << 0;
        if (this.first) {
          this.h0 = a + 1732584193 << 0;
          this.h1 = b - 271733879 << 0;
          this.h2 = c - 1732584194 << 0;
          this.h3 = d + 271733878 << 0;
          this.first = false;
        } else {
          this.h0 = this.h0 + a << 0;
          this.h1 = this.h1 + b << 0;
          this.h2 = this.h2 + c << 0;
          this.h3 = this.h3 + d << 0;
        }
      };
      Md5.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return HEX_CHARS[h0 >>> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h0 >>> 12 & 15] + HEX_CHARS[h0 >>> 8 & 15] + HEX_CHARS[h0 >>> 20 & 15] + HEX_CHARS[h0 >>> 16 & 15] + HEX_CHARS[h0 >>> 28 & 15] + HEX_CHARS[h0 >>> 24 & 15] + HEX_CHARS[h1 >>> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h1 >>> 12 & 15] + HEX_CHARS[h1 >>> 8 & 15] + HEX_CHARS[h1 >>> 20 & 15] + HEX_CHARS[h1 >>> 16 & 15] + HEX_CHARS[h1 >>> 28 & 15] + HEX_CHARS[h1 >>> 24 & 15] + HEX_CHARS[h2 >>> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h2 >>> 12 & 15] + HEX_CHARS[h2 >>> 8 & 15] + HEX_CHARS[h2 >>> 20 & 15] + HEX_CHARS[h2 >>> 16 & 15] + HEX_CHARS[h2 >>> 28 & 15] + HEX_CHARS[h2 >>> 24 & 15] + HEX_CHARS[h3 >>> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h3 >>> 12 & 15] + HEX_CHARS[h3 >>> 8 & 15] + HEX_CHARS[h3 >>> 20 & 15] + HEX_CHARS[h3 >>> 16 & 15] + HEX_CHARS[h3 >>> 28 & 15] + HEX_CHARS[h3 >>> 24 & 15];
      };
      Md5.prototype.toString = Md5.prototype.hex;
      Md5.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return [
          h0 & 255,
          h0 >>> 8 & 255,
          h0 >>> 16 & 255,
          h0 >>> 24 & 255,
          h1 & 255,
          h1 >>> 8 & 255,
          h1 >>> 16 & 255,
          h1 >>> 24 & 255,
          h2 & 255,
          h2 >>> 8 & 255,
          h2 >>> 16 & 255,
          h2 >>> 24 & 255,
          h3 & 255,
          h3 >>> 8 & 255,
          h3 >>> 16 & 255,
          h3 >>> 24 & 255
        ];
      };
      Md5.prototype.array = Md5.prototype.digest;
      Md5.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer2 = new ArrayBuffer(16);
        var blocks2 = new Uint32Array(buffer2);
        blocks2[0] = this.h0;
        blocks2[1] = this.h1;
        blocks2[2] = this.h2;
        blocks2[3] = this.h3;
        return buffer2;
      };
      Md5.prototype.buffer = Md5.prototype.arrayBuffer;
      Md5.prototype.base64 = function() {
        var v1, v2, v3, base64Str = "", bytes = this.array();
        for (var i = 0; i < 15; ) {
          v1 = bytes[i++];
          v2 = bytes[i++];
          v3 = bytes[i++];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
        }
        v1 = bytes[i];
        base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
        return base64Str;
      };
      function HmacMd5(key, sharedMemory) {
        var i, result = formatMessage(key);
        key = result[0];
        if (result[1]) {
          var bytes = [], length = key.length, index = 0, code;
          for (i = 0; i < length; ++i) {
            code = key.charCodeAt(i);
            if (code < 128) {
              bytes[index++] = code;
            } else if (code < 2048) {
              bytes[index++] = 192 | code >>> 6;
              bytes[index++] = 128 | code & 63;
            } else if (code < 55296 || code >= 57344) {
              bytes[index++] = 224 | code >>> 12;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            } else {
              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i) & 1023);
              bytes[index++] = 240 | code >>> 18;
              bytes[index++] = 128 | code >>> 12 & 63;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            }
          }
          key = bytes;
        }
        if (key.length > 64) {
          key = new Md5(true).update(key).array();
        }
        var oKeyPad = [], iKeyPad = [];
        for (i = 0; i < 64; ++i) {
          var b = key[i] || 0;
          oKeyPad[i] = 92 ^ b;
          iKeyPad[i] = 54 ^ b;
        }
        Md5.call(this, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacMd5.prototype = new Md5();
      HmacMd5.prototype.finalize = function() {
        Md5.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Md5.call(this, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Md5.prototype.finalize.call(this);
        }
      };
      var exports2 = createMethod();
      exports2.md5 = exports2;
      exports2.md5.hmac = createHmacMethod();
      if (COMMON_JS) {
        module2.exports = exports2;
      } else {
        root.md5 = exports2;
        if (AMD) {
          define(function() {
            return exports2;
          });
        }
      }
    })();
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Toolbox
});
module.exports = __toCommonJS(main_exports);

// src/PanelSearchForWord.ts
var import_obsidian2 = require("obsidian");

// src/helpers.ts
var import_obsidian = require("obsidian");
function codeBlockParamParse(source, separator = "=") {
  return source.split("\n").filter((row) => row.length > 0).map((row) => row.split(separator)).reduce((res, ret) => {
    res[ret[0]] = ret[1];
    return res;
  }, {});
}
async function imageToBase64(app, file, action, pass) {
  const content = await app.vault.read(file);
  const imageRegex = /\[\[(.*?\.(png|jpg|jpeg|gif|bmp|svg))\]\]/g;
  let links = content.match(imageRegex);
  if (links) {
    links = unique(links).map((text) => text.slice(2, -2));
    for (let link of links) {
      const file2 = app.metadataCache.getFirstLinkpathDest(link, "");
      if (action === "convert") {
        const arrayBuffer = await app.vault.adapter.readBinary(file2.path);
        const base64 = arrayBufferToBase64(arrayBuffer);
        app.vault.modify(file2, base64);
      } else if (action === "restore") {
        const base64 = await app.vault.read(file2);
        if (base64) {
          const bytes = convertBase64ToImage(base64);
          await app.vault.adapter.writeBinary(file2.path, bytes);
        }
      }
    }
  }
}
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
function convertBase64ToImage(base64) {
  const binaryString = window.atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}
function encryptString(str, password) {
  const encoder = new TextEncoder();
  const data = encoder.encode(str);
  let encrypted = "";
  for (let i = 0; i < data.length; i++) {
    encrypted += String.fromCharCode(data[i] ^ password.charCodeAt(i % password.length));
  }
  return btoa(encrypted);
}
function decryptString(encodedStr, password) {
  const decoder = new TextDecoder();
  let str = atob(encodedStr);
  let decrypted = new Uint8Array(str.length);
  for (let i = 0; i < str.length; i++) {
    decrypted[i] = str.charCodeAt(i) ^ password.charCodeAt(i % password.length);
  }
  return decoder.decode(decrypted);
}
function blur(app) {
  var _a, _b;
  (_b = (_a = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor) == null ? void 0 : _b.blur();
  getSelection().removeAllRanges();
}
var plantClassificationSystem = {
  \u88AB\u5B50\u690D\u7269\u5206\u7C7B\u7CFB\u7EDF: `\u754C: \u690D\u7269\u754C 
\u95E8: \u88AB\u5B50\u690D\u7269\u95E8`,
  \u88F8\u5B50\u690D\u7269\u5206\u7C7B\u7CFB\u7EDF: `\u754C: \u690D\u7269\u754C 
\u95E8: \u88F8\u5B50\u690D\u7269\u95E8`,
  \u77F3\u677E\u7C7B\u548C\u8568\u7C7B\u690D\u7269\u5206\u7C7B\u7CFB\u7EDF: `\u754C: \u690D\u7269\u754C 
\u95E8: \u8568\u7C7B\u690D\u7269\u95E8`,
  \u82D4\u85D3\u690D\u7269\u5206\u7C7B\u7CFB\u7EDF: `\u754C: \u690D\u7269\u754C 
\u95E8: \u82D4\u85D3\u690D\u7269\u95E8`
};
function extractChineseParts(inputString) {
  const chineseParts = inputString.match(/[\u4e00-\u9fa5]+/g).reverse();
  const yamlObject = {};
  const sy = chineseParts.shift();
  const keys = ["\u4E9A\u95E8", "\u7EB2", "\u4E9A\u7EB2", "\u8D85\u76EE", "\u79D1", "\u5C5E"];
  for (let i = 0; i < keys.length; i++) {
    yamlObject[keys[i]] = chineseParts.find((text) => text.indexOf(keys[i]) > -1) || "";
  }
  yamlObject["\u76EE"] = chineseParts.find((text) => text.slice(-1) === "\u76EE" && text.slice(-2) !== "\u8D85\u76EE") || "";
  return `${plantClassificationSystem[sy]}
\u4E9A\u95E8: ${yamlObject["\u4E9A\u95E8"]}
\u7EB2: ${yamlObject["\u7EB2"]}
\u4E9A\u7EB2: ${yamlObject["\u4E9A\u7EB2"]}
\u8D85\u76EE: ${yamlObject["\u8D85\u76EE"]}
\u79D1: ${yamlObject["\u79D1"]}
\u76EE: ${yamlObject["\u76EE"]}
\u5C5E: ${yamlObject["\u5C5E"]}`;
}
function $(className) {
  return document.querySelector(className);
}
function createElement(t, text = "", className = "") {
  const el = document.createElement(t);
  el.className = className;
  el.innerHTML = text;
  return el;
}
async function requestUrlToHTML(url) {
  const content = await (0, import_obsidian.requestUrl)(url);
  const div = document.createElement("div");
  div.innerHTML = content.text;
  return div;
}
function filterChineseAndPunctuation(str) {
  const regex = /[\u4e00-\u9fa5。，、；;]/g;
  return str.match(regex).join("");
}
function trimNonChineseChars(str) {
  return str.replace(/^[^\u4e00-\u9fa5]+|[^\u4e00-\u9fa5]+$/g, "");
}
function removeDuplicates(arr) {
  return arr.filter((item, index) => arr.indexOf(item) === index);
}
function pick(arr, n = 1, repeat = true) {
  if (n >= arr.length) {
    return arr;
  }
  let result = [];
  let picked = /* @__PURE__ */ new Set();
  for (let i = 0; i < n; i++) {
    let index = Math.floor(Math.random() * arr.length);
    if (!repeat) {
      while (picked.has(index)) {
        index = Math.floor(Math.random() * arr.length);
      }
      picked.add(index);
    }
    result.push(arr[index]);
  }
  return result;
}
function debounce(fn, delay = 500) {
  let timer = null;
  return function(...args) {
    if (timer) {
      clearTimeout(timer);
    }
    timer = setTimeout(() => {
      fn(...args);
    }, delay);
  };
}
function today(more = false) {
  return (0, import_obsidian.moment)().format("YYYY-MM-DD" + (more ? " hh:mm:ss" : ""));
}
function msTo(t) {
  let duration = import_obsidian.moment.duration(t);
  let hours = Math.floor(duration.asHours());
  let minutes = duration.minutes();
  let seconds = duration.seconds();
  return `${hours ? hours + "h" : ""}${minutes ? minutes + "m" : ""}${seconds ? seconds + "s" : ""}`;
}
function unique(arr) {
  return [...new Set(arr)];
}
function uniqueBy(arr, key) {
  const seen = /* @__PURE__ */ new Set();
  return arr.filter((item) => {
    const keyValue = key(item);
    return seen.has(keyValue) ? false : seen.add(keyValue);
  });
}
function getBlock(app, editor, file) {
  const cursor = editor.getCursor("to");
  const fileCache = app.metadataCache.getFileCache(file);
  let block = ((fileCache === null || fileCache === void 0 ? void 0 : fileCache.sections) || []).find((section) => {
    return section.position.start.line <= cursor.line && section.position.end.line >= cursor.line;
  });
  if ((block === null || block === void 0 ? void 0 : block.type) === "list") {
    block = ((fileCache === null || fileCache === void 0 ? void 0 : fileCache.listItems) || []).find((item) => {
      return item.position.start.line <= cursor.line && item.position.end.line >= cursor.line;
    });
  } else if ((block === null || block === void 0 ? void 0 : block.type) === "heading") {
    block = fileCache.headings.find((heading) => {
      return heading.position.start.line === block.position.start.line;
    });
  }
  let blockId = block.id;
  if (!blockId) {
    const sectionEnd = block.position.end;
    const end = {
      ch: sectionEnd.col,
      line: sectionEnd.line
    };
    const id = generateId();
    const spacer = shouldInsertAfter(block) ? "\n\n" : " ";
    editor.replaceRange(`${spacer}^${id}`, end);
    blockId = id;
  }
  return blockId;
}
function generateId() {
  return Math.random().toString(36).substr(2, 6);
}
function shouldInsertAfter(block) {
  if (block.type) {
    return ["blockquote", "code", "table", "comment", "footnoteDefinition"].includes(block.type);
  }
}

// src/PanelSearchForWord.ts
var PanelSearchForWord = class extends import_obsidian2.Modal {
  constructor(app, title, content, onSubmit, onSubmit2) {
    super(app);
    this.title = title;
    this.content = content;
    this.onSubmit = onSubmit;
    this.onSubmit2 = onSubmit2;
  }
  onOpen() {
    const { contentEl, titleEl } = this;
    titleEl.setText(this.title);
    contentEl.setText(this.content);
    new import_obsidian2.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("\u5199\u751F\u8BCD").setCta().onClick(() => {
        this.close();
        this.onSubmit();
      })
    );
    new import_obsidian2.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("\u5199\u5361\u7247").setCta().onClick(() => {
        this.close();
        this.onSubmit2();
      })
    );
  }
  onClose() {
    blur(this.app);
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/Confirm.ts
var import_obsidian3 = require("obsidian");
var Confirm = class extends import_obsidian3.Modal {
  constructor(app, text, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.text = text;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.text });
    new import_obsidian3.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("\u786E\u8BA4").setCta().onClick(() => {
        this.close();
        this.onSubmit(true);
      })
    ).addButton(
      (btn) => btn.setButtonText("\u53D6\u6D88").setCta().onClick(() => {
        this.close();
        this.onSubmit(false);
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/PanelHighlight.ts
var import_obsidian4 = require("obsidian");
var PanelHighlight = class extends import_obsidian4.Modal {
  constructor(app, text, buttonText, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.text = text;
    this.buttonText = buttonText;
  }
  onOpen() {
    const { contentEl, titleEl } = this;
    titleEl.setText("\u5212\u7EBF");
    contentEl.setText(this.text);
    new import_obsidian4.Setting(contentEl).addText(
      (text) => text.onChange((value) => {
        this.result = value;
      })
    );
    new import_obsidian4.Setting(contentEl).addButton(
      (btn) => btn.setButtonText(this.buttonText).setCta().onClick(() => {
        this.close();
        this.onSubmit(this.result);
      })
    );
  }
  onClose() {
    blur(this.app);
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var import_obsidian8 = require("obsidian");

// src/settings.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  passwordCreator: true,
  passwordCreatorMixedContent: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@$%^&*()_+",
  passwordCreatorLength: 16,
  polysemy: true,
  footnoteRenumbering: true,
  searchForWords: true,
  flip: true,
  fileCorrect: -35,
  fullScreenMode: false,
  readDataTracking: true,
  readDataTrackingFolder: "\u4E66\u5E93",
  readDataTrackingTimeout: 300 * 1e3,
  readDataTrackingDelayTime: 3 * 1e3,
  highlight: true,
  readingNotes: true,
  readingNotesToFolder: "\u4E66\u5E93/\u8BFB\u4E66\u7B14\u8BB0",
  outLink: true,
  blockId: true,
  frontmatter: true,
  reviewOfReadingNotes: true,
  readingPageStyles: true,
  fontSize: 36,
  blockReference: true,
  searchForPlants: true,
  searchForPlantsFolder: "\u5361\u7247\u76D2/\u5F52\u6863",
  encryption: true,
  gallery: true
};
var ToolboxSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: this.plugin.manifest.name });
    new import_obsidian5.Setting(containerEl).setName("\u{1F511} \u5BC6\u7801\u521B\u5EFA\u5668").addToggle(
      (cd) => cd.setValue(this.plugin.settings.passwordCreator).onChange(async (value) => {
        this.plugin.settings.passwordCreator = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.passwordCreator) {
      new import_obsidian5.Setting(containerEl).setName("\u4ECE\u6307\u5B9A\u5B57\u7B26\u96C6\u4E2D\u968F\u673A\u751F\u6210\u5BC6\u7801").addText(
        (cd) => cd.setValue("" + this.plugin.settings.passwordCreatorMixedContent).onChange(async (value) => {
          this.plugin.settings.passwordCreatorMixedContent = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian5.Setting(containerEl).setName("\u751F\u6210\u5BC6\u7801\u7684\u957F\u5EA6").addText(
        (cd) => cd.setValue("" + this.plugin.settings.passwordCreatorLength).onChange(async (value) => {
          this.plugin.settings.passwordCreatorLength = Number(value);
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian5.Setting(containerEl).setName("\u{1F517} \u591A\u4E49\u7B14\u8BB0\u8F6C\u8DF3").setDesc('to: "[[filename or path]]"').addToggle(
      (cd) => cd.setValue(this.plugin.settings.polysemy).onChange(async (value) => {
        this.plugin.settings.polysemy = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian5.Setting(containerEl).setName("\u{1F3F7}\uFE0F \u811A\u6CE8\u91CD\u7F16\u53F7").addToggle(
      (cd) => cd.setValue(this.plugin.settings.footnoteRenumbering).onChange(async (value) => {
        this.plugin.settings.footnoteRenumbering = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (import_obsidian5.Platform.isMobile) {
      new import_obsidian5.Setting(containerEl).setName("\u{1F550} \u9605\u8BFB\u6570\u636E\u8DDF\u8E2A").setDesc("\u9605\u8BFB\u8FDB\u5EA6\u3001\u65F6\u957F\uFF0C\u672A\u8BFB\u4EE5\u53CA\u8BFB\u5B8C").addToggle(
        (cd) => cd.setValue(this.plugin.settings.readDataTracking).onChange(async (value) => {
          this.plugin.settings.readDataTracking = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      if (this.plugin.settings.readDataTracking) {
        new import_obsidian5.Setting(containerEl).setName("\u8DDF\u8E2A\u54EA\u4E2A\u6587\u4EF6\u5939").addText(
          (cd) => cd.setValue("" + this.plugin.settings.readDataTrackingFolder).onChange(async (value) => {
            this.plugin.settings.readDataTrackingFolder = value;
            await this.plugin.saveSettings();
          })
        );
        new import_obsidian5.Setting(containerEl).setName("\u8D85\u65F6").setDesc(`\u8D85\u8FC7\u4E00\u6BB5\u65F6\u95F4\u672A\u7FFB\u9875\u5C06\u6682\u505C\u8DDF\u8E2A\u9605\u8BFB\u65F6\u957F\uFF0C\u4EE5\u83B7\u5F97\u66F4\u51C6\u786E\u7684\u6570\u636E\u3002`).addText(
          (cd) => cd.setValue("" + this.plugin.settings.readDataTrackingTimeout).onChange(async (value) => {
            this.plugin.settings.readDataTrackingTimeout = Number(value);
            await this.plugin.saveSettings();
          })
        );
        new import_obsidian5.Setting(containerEl).setName("\u8DDF\u8E2A\u6570\u636E\u5EF6\u8FDF\u66F4\u65B0").setDesc("\u5728\u67D0\u4E9B\u8001\u65E7\u6C34\u58A8\u5C4F\u8BBE\u5907\u6216\u8005\u5355\u6587\u4EF6\u4F53\u79EF\u8FC7\u5927\uFF0C\u6BCF\u6B21\u66F4\u65B0\u8DDF\u8E2A\u6570\u636E\u90FD\u4F1A\u5BFC\u81F4\u7FFB\u9875\u660E\u663E\u6EDE\u540E\uFF0C\u8BBE\u7F6E\u5EF6\u8FDF\u4EE5\u5927\u5E45\u63D0\u5347\u7FFB\u9875\u6D41\u7545\u6027").addText(
          (text) => text.setValue("" + this.plugin.settings.readDataTrackingDelayTime).onChange(async (value) => {
            this.plugin.settings.readDataTrackingDelayTime = Number(value);
            await this.plugin.saveSettings();
          })
        );
      }
      new import_obsidian5.Setting(containerEl).setName("\u{1F447}\u{1F3FC} \u7FFB\u9875").setDesc("\u70B9\u51FB\u4E0B\u7FFB\uFF0C\u5DE6\u6ED1\u4E0B\u7FFB\uFF0C\u53F3\u6ED1\u4E0A\u7FFB\uFF0C\u957F\u63090.5s\u8FDB\u5165\u7F16\u8F91\u6A21\u5F0F\uFF0C\u6536\u8D77\u8F6F\u952E\u76D8\u8FDB\u5165\u9605\u8BFB\u6A21\u5F0F").addToggle(
        (cd) => cd.setValue(this.plugin.settings.flip).onChange(async (value) => {
          this.plugin.settings.flip = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      if (this.plugin.settings.flip) {
        new import_obsidian5.Setting(containerEl).setName("\u4FEE\u6B63\u503C").addText(
          (cd) => cd.setValue("" + this.plugin.settings.fileCorrect).onChange(async (value) => {
            this.plugin.settings.fileCorrect = Number(value);
            await this.plugin.saveSettings();
          })
        );
      }
      new import_obsidian5.Setting(containerEl).setName("\u{1F917} \u5168\u5C4F\u6A21\u5F0F").addToggle(
        (cd) => cd.setValue(this.plugin.settings.fullScreenMode).onChange(async (value) => {
          this.plugin.settings.fullScreenMode = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      new import_obsidian5.Setting(containerEl).setName("\u{1F50E} \u67E5\u8BCD").addToggle(
        (cd) => cd.setValue(this.plugin.settings.searchForWords).onChange(async (value) => {
          this.plugin.settings.searchForWords = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      new import_obsidian5.Setting(containerEl).setName("\u270F\uFE0F \u5212\u7EBF").addToggle(
        (cd) => cd.setValue(this.plugin.settings.highlight).onChange(async (value) => {
          this.plugin.settings.highlight = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      new import_obsidian5.Setting(containerEl).setName("\u{1F4D9} \u540C\u6B65\u8BFB\u4E66\u7B14\u8BB0").addToggle(
        (cd) => cd.setValue(this.plugin.settings.readingNotes).onChange(async (value) => {
          this.plugin.settings.readingNotes = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      if (this.plugin.settings.readingNotes) {
        new import_obsidian5.Setting(containerEl).setName("\u540C\u6B65\u81F3\u54EA\u4E2A\u6587\u4EF6\u5939").addText(
          (cd) => cd.setValue("" + this.plugin.settings.readingNotesToFolder).onChange(async (value) => {
            this.plugin.settings.readingNotesToFolder = value;
            await this.plugin.saveSettings();
          })
        );
        new import_obsidian5.Setting(containerEl).setName("\u540C\u6B65\u51FA\u94FE").addToggle(
          (cd) => cd.setValue(this.plugin.settings.outLink).onChange(async (value) => {
            this.plugin.settings.outLink = value;
            await this.plugin.saveSettings();
          })
        );
        new import_obsidian5.Setting(containerEl).setName("\u540C\u6B65\u5143\u5B57\u6BB5").setDesc("\u6DFB\u52A0\u5212\u7EBF\uFF0C\u60F3\u6CD5\u548C\u51FA\u94FE\u6570\u91CF\u5143\u5B57\u6BB5").addToggle(
          (cd) => cd.setValue(this.plugin.settings.frontmatter).onChange(async (value) => {
            this.plugin.settings.frontmatter = value;
            await this.plugin.saveSettings();
          })
        );
        new import_obsidian5.Setting(containerEl).setName("\u6DFB\u52A0\u5757id").addToggle(
          (cd) => cd.setValue(this.plugin.settings.blockId).onChange(async (value) => {
            this.plugin.settings.blockId = value;
            await this.plugin.saveSettings();
          })
        );
      }
      new import_obsidian5.Setting(containerEl).setName("\u{1F388} \u9605\u8BFB\u9875\u9762").addToggle(
        (cd) => cd.setValue(this.plugin.settings.readingPageStyles).onChange(async (value) => {
          this.plugin.settings.readingPageStyles = value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
      if (this.plugin.settings.readingPageStyles) {
        new import_obsidian5.Setting(containerEl).setName("\u5B57\u4F53\u5927\u5C0F").addText(
          (cd) => cd.setValue("" + this.plugin.settings.fontSize).onChange(async (value) => {
            this.plugin.settings.fontSize = Number(value);
            await this.plugin.saveSettings();
          })
        );
      }
    }
    new import_obsidian5.Setting(containerEl).setName("\u{1F4D6} \u8BFB\u4E66\u7B14\u8BB0\u56DE\u987E").addToggle(
      (cd) => cd.setValue(this.plugin.settings.reviewOfReadingNotes).onChange(async (value) => {
        this.plugin.settings.reviewOfReadingNotes = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian5.Setting(containerEl).setName("\u{1F4CC} \u5757\u5F15\u7528").setDesc("\u83B7\u53D6\u5149\u6807\u6240\u5728\u884C\uFF08\u5757\uFF09\u7684\u53CC\u94FE\uFF0C\u65B9\u4FBF\u590D\u5236\u5230\u5730\u65B9\u4F7F\u7528").addToggle(
      (cd) => cd.setValue(this.plugin.settings.blockReference).onChange(async (value) => {
        this.plugin.settings.blockReference = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian5.Setting(containerEl).setName("\u{1F3F5}\uFE0F \u67E5\u690D\u7269").setDesc("").addToggle(
      (cd) => cd.setValue(this.plugin.settings.searchForPlants).onChange(async (value) => {
        this.plugin.settings.searchForPlants = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.readDataTracking) {
      new import_obsidian5.Setting(containerEl).setName("\u653E\u81F3\u54EA\u4E2A\u6587\u4EF6\u5939").addText(
        (cd) => cd.setValue("" + this.plugin.settings.searchForPlantsFolder).onChange(async (value) => {
          this.plugin.settings.searchForPlantsFolder = value;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian5.Setting(containerEl).setName("\u{1F512} \u7B14\u8BB0\u52A0\u5BC6").setDesc("\u672C\u529F\u80FD\u8FD8\u5904\u4E8E\u6D4B\u8BD5\u9636\u6BB5\uFF0C\u8BF7\u505A\u597D\u5907\u4EFD\uFF0C\u907F\u514D\u56E0\u610F\u5916\u60C5\u51B5\u5BFC\u81F4\u6570\u636E\u635F\u574F\u6216\u4E22\u5931\u3002").addToggle(
      (cd) => cd.setValue(this.plugin.settings.encryption).onChange(async (value) => {
        this.plugin.settings.encryption = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian5.Setting(containerEl).setName("\u{1F4F8} \u753B\u5ECA").addToggle(
      (cd) => cd.setValue(this.plugin.settings.gallery).onChange(async (value) => {
        this.plugin.settings.gallery = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// src/main.ts
var import_js_md5 = __toESM(require_md5());

// src/PanelExhibition.ts
var import_obsidian6 = require("obsidian");
var PanelExhibition = class extends import_obsidian6.Modal {
  constructor(app, title, content, onSubmit = null) {
    super(app);
    this.title = title;
    this.content = content;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl, titleEl } = this;
    titleEl.setText(this.title);
    contentEl.setText(this.content);
    if (this.onSubmit) {
      new import_obsidian6.Setting(contentEl).addButton(
        (btn) => btn.setButtonText("\u67E5\u770B").setCta().onClick(() => {
          this.close();
          this.onSubmit();
        })
      );
    }
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/PanelSearchForPlants.ts
var import_obsidian7 = require("obsidian");
var PanelSearchForPlants = class extends import_obsidian7.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl, titleEl } = this;
    new import_obsidian7.Setting(contentEl).addText(
      (text) => text.onChange((value) => {
        this.result = value;
      })
    );
    new import_obsidian7.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("\u67E5\u690D\u7269").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.result);
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var SOURCE_VIEW_CLASS = ".cm-scroller";
var MASK_CLASS = ".__mask";
var MOBILE_HEADER_CLASS = ".view-header";
var MOBILE_NAVBAR_CLASS = ".mobile-navbar-actions";
var COMMENT_CLASS = ".__comment";
var OUT_LINK_CLASS = ".cm-underline";
var Toolbox = class extends import_obsidian8.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ToolboxSettingTab(this.app, this));
    if (!import_obsidian8.Platform.isMobile) {
      Object.assign(this.settings, {
        flip: false,
        fullScreenMode: false,
        readDataTracking: false,
        highlight: false,
        readingNotes: false,
        readingPageStyles: false
      });
    }
    this.debounceReadDataTracking = debounce(this.readDataTracking.bind(this), this.settings.readDataTrackingDelayTime);
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        this.startTime = Date.now();
        const sourceView = $(SOURCE_VIEW_CLASS);
        this.polysemy(file);
        this.adjustPageStyle(sourceView, file);
        this.mask(sourceView, file);
        this.gallery();
        this.reviewOfReadingNotes();
      })
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        const sourceView = $(SOURCE_VIEW_CLASS);
        const file = this.getView().file;
        this.adjustPageStyle(sourceView, file);
        this.mask(sourceView, file);
      })
    );
    this.addCommand({
      id: "\u52A0\u5BC6\u7B14\u8BB0",
      name: "\u52A0\u5BC6\u7B14\u8BB0",
      editorCallback: (editor, view) => this.encrypt(view.file)
    });
    this.addCommand({
      id: "\u89E3\u5BC6\u7B14\u8BB0",
      name: "\u89E3\u5BC6\u7B14\u8BB0",
      editorCallback: (editor, view) => this.decrypt(view.file)
    });
    this.settings.passwordCreator && this.addCommand({
      id: "\u5BC6\u7801\u521B\u5EFA\u5668",
      name: "\u5BC6\u7801\u521B\u5EFA\u5668",
      callback: () => this.passwordCreator()
    });
    this.settings.footnoteRenumbering && this.addCommand({
      id: "\u811A\u6CE8\u91CD\u7F16\u53F7",
      name: "\u811A\u6CE8\u91CD\u7F16\u53F7",
      editorCallback: (editor, view) => this.footnoteRenumbering(view.file)
    });
    this.settings.blockReference && this.addCommand({
      id: "\u5757\u5F15\u7528",
      name: "\u5757\u5F15\u7528",
      icon: "blocks",
      editorCallback: (editor, view) => this.blockReference(editor, view.file)
    });
    this.settings.searchForWords && this.addCommand({
      id: "\u67E5\u8BCD",
      icon: "search",
      name: "\u67E5\u8BCD",
      editorCallback: (editor) => this.searchForWords(editor)
    });
    this.settings.searchForPlants && this.addCommand({
      id: "\u67E5\u690D\u7269",
      name: "\u67E5\u690D\u7269",
      icon: "flower-2",
      callback: () => this.searchForPlants()
    });
    this.settings.flip && this.addCommand({
      id: "\u7FFB\u9875",
      name: "\u7FFB\u9875",
      icon: "chevron-down",
      editorCallback: (editor, view) => this.flip(view.file)
    });
    this.settings.highlight && this.addCommand({
      id: "\u5212\u7EBF",
      name: "\u5212\u7EBF",
      icon: "brush",
      editorCallback: (editor, view) => this.highlight(editor, view.file)
    });
    this.settings.readingNotes && this.addCommand({
      id: "\u540C\u6B65\u8BFB\u4E66\u7B14\u8BB0",
      name: "\u540C\u6B65\u8BFB\u4E66\u7B14\u8BB0",
      icon: "activity",
      callback: () => this.app.vault.getMarkdownFiles().filter((file) => this.hasReadingPage(file)).forEach((file) => this.syncNote(file))
    });
  }
  gallery() {
    if (!this.settings.gallery)
      return;
    this.registerMarkdownCodeBlockProcessor("t-gallery", (source, el, ctx) => {
      const { path } = codeBlockParamParse(source);
      if (path) {
        const files = this.app.vault.getFiles().filter((file) => new RegExp(`^${path}`).test(file.path)).filter((file) => ["png", "jpg", "jpeg", "gif", "bmp", "svg"].includes(file.extension));
        const content = files.map((file) => this.app.vault.adapter.getResourcePath(file.path)).reduce((res, ret) => res += `<img alt="" src="${ret}">`, "");
        el.innerHTML = content;
      }
    });
  }
  reviewOfReadingNotes() {
    if (!this.settings.reviewOfReadingNotes)
      return;
    this.registerMarkdownCodeBlockProcessor("t-review", async (source, el, ctx) => {
      const { count } = codeBlockParamParse(source);
      if (count) {
        let highlights = [];
        const files = this.app.vault.getMarkdownFiles().filter((file) => new RegExp(`^${this.settings.readingNotesToFolder}`).test(file.path));
        for (let file of files) {
          const highlight = (await this.app.vault.cachedRead(file)).match(/\[.+?\]\(.*\)/g);
          if (highlight)
            highlights = highlights.concat(highlight.map((h) => ({ text: h, file })));
        }
        const content = pick(highlights, count, false).reduce((res, ret) => {
          const [a, b, c] = /\[(.*)\]\((.*)\)/g.exec(ret.text);
          res += `<div data-callout-metadata="" data-callout-fold="" data-callout="quote" class="callout"><div class="callout-title" dir="auto"><div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-inner"><a class="internal-link" data-href="${ret.file.path}" href="${ret.file.path}" target="_blank" rel="noopener">\u300A${ret.file.basename}\u300B</a> </div></div><div class="callout-content">
<p dir="auto"><a class="internal-link" data-href="${c}" href="${c}" target="_blank" rel="noopener">${b.slice(9)}</a></p>
</div></div>`;
          return res;
        }, "");
        el.innerHTML = content;
      }
    });
  }
  async encrypt(file) {
    if (!this.settings.encryption)
      return;
    new PanelHighlight(this.app, "\u8BF7\u8F93\u5165\u52A0\u5BC6\u5BC6\u7801\u3002\uFF08\u2757\uFE0F\u2757\uFE0F\u2757\uFE0F\u8BF7\u6CE8\u610F\uFF0C\u672C\u529F\u80FD\u8FD8\u5904\u4E8E\u6D4B\u8BD5\u9636\u6BB5\uFF0C\u8BF7\u505A\u597D\u5907\u4EFD\uFF0C\u907F\u514D\u56E0\u610F\u5916\u60C5\u51B5\u5BFC\u81F4\u6570\u636E\u635F\u574F\u6216\u4E22\u5931\u3002\u53E6\u5916\uFF0C\u9664\u4E86\u52A0\u5BC6\u7B14\u8BB0\u4E2D\u7684\u6587\u672C\u90E8\u5206\u5916\uFF0C\u8FD8\u5BF9\u7B14\u8BB0\u4E2D\u6240\u6709\u4EE5 wiki \u94FE\u63A5\u7684\u56FE\u7247\u8FDB\u884C\u52A0\u5BC6\u5E76\u4E14\u4F1A\u8986\u76D6\u539F\u56FE\uFF0C\u4E5F\u8BF7\u505A\u597D\u5907\u4EFD\u2757\uFE0F\u2757\uFE0F\u2757\uFE0F\uFF09", "\u52A0\u5BC6", async (pass) => {
      if (!pass)
        return;
      await imageToBase64(this.app, file, "convert", pass);
      this.app.vault.modify(file, encryptString(await this.app.vault.read(file), pass));
    }).open();
  }
  async decrypt(file) {
    if (!this.settings.encryption)
      return;
    new PanelHighlight(this.app, "\u8BF7\u8F93\u5165\u89E3\u5BC6\u5BC6\u7801\u3002", "\u89E3\u5BC6", async (pass) => {
      if (!pass)
        return;
      this.app.vault.modify(file, decryptString(await this.app.vault.read(file), pass));
      await imageToBase64(this.app, file, "restore", pass);
    }).open();
  }
  async searchForPlants() {
    if (!this.settings.searchForPlants)
      return;
    new PanelSearchForPlants(this.app, async (name) => {
      var _a, _b, _c, _d;
      const html = await requestUrlToHTML("https://www.iplant.cn/info/" + name);
      const id = html.querySelector(".barcodeimg img").getAttr("src").split("=").pop();
      const latinName = (_a = html.querySelector("#sptitlel")) == null ? void 0 : _a.textContent;
      let alias = (_c = (_b = html.querySelector(".infomore>div")) == null ? void 0 : _b.firstChild) == null ? void 0 : _c.textContent;
      let other = (_d = html.querySelector(".infomore>.spantxt")) == null ? void 0 : _d.textContent;
      if (latinName.trim() === "" && other) {
        new import_obsidian8.Notice(`${name}\uFF1F\u60A8\u662F\u5426\u5728\u627E ${other}`);
        return;
      }
      if (id === "") {
        new import_obsidian8.Notice(`${name}\uFF1F\u60A8\u53EF\u80FD\u8F93\u5165\u9519\u8BEF\u6216\u690D\u7269\u667A\u4E0D\u5B58\u5728\u76F8\u5173\u690D\u7269`);
        return;
      }
      if (alias.indexOf("\u4FD7\u540D") > -1) {
        alias = alias.split("\u3001").join("\n - ").replace("\u4FD7\u540D\uFF1A", "\n - ");
      } else {
        alias = " ";
      }
      const classsys = extractChineseParts(JSON.parse(await (0, import_obsidian8.request)(`https://www.iplant.cn/ashx/getspinfos.ashx?spid=${id}&type=classsys`)).classsys.find((text) => Object.keys(plantClassificationSystem).some((name2) => text.indexOf(name2) > -1)));
      const plantIntelligence = await (0, import_obsidian8.request)(`https://www.iplant.cn/ashx/getfrps.ashx?key=${latinName.split(" ").join("+")}`);
      const lifestyleForm = plantIntelligence ? (0, import_obsidian8.htmlToMarkdown)(JSON.parse(plantIntelligence).frpsdesc).replace(/^[^\n]*\n[^\n]*\n[^\n]*\n/, "") : "\u300A\u690D\u7269\u667A\u300B\u672A\u6536\u5F55\u3002";
      const content = `---
\u4E2D\u6587\u540D: ${name}
\u62C9\u4E01\u5B66\u540D: ${latinName}
\u522B\u540D: ${alias}
${classsys}
\u8BC6\u522B\u7279\u5F81: 
---
${lifestyleForm}`;
      const filepath = "\u5361\u7247\u76D2/\u5F52\u6863/" + name + ".md";
      let file = this.app.vault.getFileByPath(filepath) || this.app.vault.getFileByPath("\u5361\u7247\u76D2/" + name + ".md");
      if (file) {
        new import_obsidian8.Notice("\u67E5\u8BE2\u7684\u690D\u7269\u7B14\u8BB0\u5DF2\u5B58\u5728");
      } else {
        file = await this.app.vault.create(filepath, content);
      }
      this.app.workspace.getLeaf(true).openFile(file);
    }).open();
  }
  blockReference(editor, file) {
    if (!this.settings.blockReference)
      return;
    let blockId = getBlock(this.app, editor, file);
    window.navigator.clipboard.writeText(`[[${file.path.replace("." + file.extension, "")}#^${blockId}|${file.basename}]]`);
    new import_obsidian8.Notice("\u5757\u5F15\u7528\u5DF2\u590D\u5236\u81F3\u526A\u5207\u677F\uFF01");
  }
  mask(el, file) {
    if (!this.settings.flip)
      return;
    let timer, xStart, xEnd;
    const t = $(MOBILE_HEADER_CLASS);
    const b = $(MOBILE_NAVBAR_CLASS);
    let mask = $(MASK_CLASS) || document.body.appendChild(createElement("div", "", MASK_CLASS.slice(1)));
    if (this.hasReadingPage(file)) {
      if (this.settings.fullScreenMode) {
        t.hide();
        b.hide();
      }
      const th = t.offsetHeight || 0;
      const bh = b.offsetHeight || 0;
      mask.style.position = "fixed";
      mask.style.bottom = bh + 10 + "px";
      mask.style.left = "0";
      mask.style.width = "100%";
      mask.style.height = el.clientHeight - th - bh + "px";
      mask.style.backgroundColor = "transparent";
      mask.style.zIndex = "1";
      mask.show();
      mask.ontouchstart = (e) => {
        timer = window.setTimeout(() => mask.hide(), 500);
        xStart = e.touches[0].pageX;
      };
      mask.ontouchend = (e) => {
        window.clearTimeout(timer);
        xEnd = e.changedTouches[0].pageX;
        if (xEnd - xStart > 10) {
          this.flip(file, true);
        } else if (xEnd - xStart < -10) {
          this.flip(file);
        }
      };
      mask.onclick = async (e) => {
        const x = e.clientX;
        const y = e.clientY;
        mask.hide();
        const target = document.elementFromPoint(x, y);
        mask.show();
        if (target.hasClass(COMMENT_CLASS.slice(1))) {
          const text = target.textContent;
          const { comment, date } = target.dataset;
          new PanelExhibition(this.app, "\u8BC4\u8BBA", comment ? createElement("p", `${comment}${date ? "</br></br><i>" + date + "</i>" : ""}`) : "\u7A7A\u7A7A\u5982\u4E5F").open();
        } else if (target.hasClass(OUT_LINK_CLASS.slice(1))) {
          target.click();
          const text = target.textContent.split("|").shift();
          const file2 = this.getFileByShort(text);
          new PanelExhibition(this.app, text, file2 ? createElement("p", await this.app.vault.read(file2)) : "\u7A7A\u7A7A\u5982\u4E5F", file2 && (() => this.app.workspace.getLeaf(false).openFile(file2))).open();
        } else {
          this.flip(file);
        }
      };
      const originalHeight = window.innerHeight;
      window.onresize = () => {
        if (window.innerHeight === originalHeight) {
          mask.show();
          blur(this.app);
        } else {
          mask.hide();
        }
      };
    } else {
      mask.hide();
      mask.onclick = mask.ontouchstart = mask.ontouchend = window.onresize = null;
      t.show();
      b.show();
    }
  }
  adjustPageStyle(el, file) {
    if (this.settings.readingPageStyles && this.hasReadingPage(file)) {
      el.style.fontSize = this.settings.fontSize + "px";
    } else {
      el.style.fontSize = "unset";
    }
  }
  async syncNote(file) {
    if (!this.settings.readingNotes)
      return;
    let markdown = await this.app.vault.read(file);
    let highlights = 0;
    let thinks = 0;
    let outlinks = 0;
    const { links, frontmatter } = this.app.metadataCache.getFileCache(file);
    let content = "---\ntags: \u8BFB\u4E66\u7B14\u8BB0\n---";
    if (this.settings.outLink && links) {
      content += "\n\n# \u51FA\u94FE\n\n";
      uniqueBy(links, (link) => link.link).forEach(({ link }) => content += `[[${link}|${link.split("/").pop()}]] / `);
      content = content.slice(0, -3);
      outlinks = links.length;
    }
    let { bookReview } = frontmatter;
    bookReview && (content += `

# \u4E66\u8BC4 

 > [!tip] ${bookReview}${this.settings.blockId ? " ^" + (0, import_js_md5.md5)(bookReview) : ""}`);
    const t = (markdown.match(/<span class="__comment.+?<\/span>|#{1,6} .+/gm) || []).map((b) => {
      const isTitle = b[0] === "#";
      let res = { isTitle };
      if (!isTitle) {
        const div = document.createElement("div");
        div.innerHTML = b;
        const el = div.firstChild;
        const { comment, id } = el.dataset;
        const text = el.textContent;
        res.text = `> [!quote] [${text}](${file.path}#^${id}) ${comment ? "\n\u{1F4AC} " + comment : ""}${this.settings.blockId ? " ^" + (0, import_js_md5.md5)(text) : ""}`;
        highlights++;
        if (comment)
          thinks++;
      } else {
        res.text = b;
      }
      return res;
    }).filter((o, i, arr) => {
      var _a;
      return o.isTitle ? !((_a = arr[i + 1]) == null ? void 0 : _a.isTitle) : true;
    });
    if (t && t.length) {
      t[t.length - 1].isTitle && t.pop();
      if (t.length) {
        content += "\n\n# \u5212\u7EBF \n\n";
        t.forEach(({ text }) => content += text + "\n\n");
      }
    }
    const readingNotePath = this.settings.readingNotesToFolder + "/" + file.name;
    const readingNoteFile = this.app.vault.getAbstractFileByPath(readingNotePath);
    if (readingNoteFile) {
      const sourceContent = await this.app.vault.read(readingNoteFile);
      if (sourceContent !== content) {
        this.app.vault.modify(readingNoteFile, content);
        this.updateMetadata(file, outlinks, highlights, thinks);
        new import_obsidian8.Notice(file.name + " - \u5DF2\u540C\u6B65");
      }
    } else {
      this.app.vault.create(readingNotePath, content);
      this.updateMetadata(file, outlinks, highlights, thinks);
      new import_obsidian8.Notice(file.name + " - \u5DF2\u540C\u6B65");
    }
  }
  highlight(editor, file) {
    if (!this.settings.highlight)
      return;
    let text = editor.getSelection();
    new PanelHighlight(this.app, text, "\u5199\u60F3\u6CD5", async (res) => {
      let blockId = getBlock(this.app, editor, file);
      res = `<span class="__comment cm-highlight" data-comment="${res || ""}" data-id="${blockId}" data-date="${today(true)}">${text}</span>`;
      editor.replaceSelection(res);
    }).open();
  }
  readDataTracking(el, file) {
    var _a;
    if (!this.settings.readDataTracking || !this.hasReadingPage(file))
      return;
    let { readingProgress = 0, readingDate, completionDate } = ((_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) || {};
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      if (readingDate && !completionDate) {
        frontmatter.readingProgress = parseFloat(((el.scrollTop + el.clientHeight) / el.scrollHeight * 100).toFixed(2));
        if (!frontmatter.readingTime)
          frontmatter.readingTime = 0;
        frontmatter.readingTime += Math.min(this.settings.readDataTrackingTimeout, Date.now() - this.startTime);
        this.startTime = Date.now();
        frontmatter.readingTimeFormat = msTo(frontmatter.readingTime);
      }
      if (!readingDate) {
        new Confirm(this.app, `\u300A${file.basename}\u300B\u672A\u8FC7\u8BFB\uFF0C\u662F\u5426\u6807\u8BB0\u5728\u8BFB\uFF1F`, (res) => {
          res && this.updateFrontmatter(file, "readingDate", today());
        }).open();
      }
      if (readingProgress >= 100 && !completionDate) {
        new Confirm(this.app, `\u300A${file.basename}\u300B\u8FDB\u5EA6 100%\uFF0C\u662F\u5426\u6807\u8BB0\u8BFB\u5B8C\uFF1F`, (res) => res && this.updateFrontmatter(file, "completionDate", today())).open();
      }
    });
  }
  async searchForWords(editor) {
    var _a;
    if (!this.settings.searchForWords)
      return;
    let word = editor.getSelection();
    const html = await requestUrlToHTML("https://www.zdic.net/hans/" + word);
    const jnr = html.querySelector(".jnr");
    const pinyin = ((_a = html.querySelector(".ciif .dicpy")) == null ? void 0 : _a.textContent) || Array.from(html.querySelectorAll(".z_py .z_d.song")).map((el) => el.textContent).join("|") || "";
    const html2 = await requestUrlToHTML("https://baike.baidu.com/item/" + word);
    const JSummary = html2.querySelector(".J-summary");
    const div = document.createElement("div");
    div.appendChild(createElement("h1", "\u6C49\u5178"));
    div.appendChild(jnr || createElement("p", "\u7A7A\u7A7A\u5982\u4E5F"));
    div.appendChild(createElement("h1", "\u767E\u5EA6\u767E\u79D1"));
    div.appendChild(JSummary || createElement("p", "\u7A7A\u7A7A\u5982\u4E5F"));
    new PanelSearchForWord(
      this.app,
      `${word} ${pinyin}`,
      div || "\u7A7A\u7A7A\u5982\u4E5F",
      async () => {
        const meanings = removeDuplicates(Array.from(jnr.querySelectorAll(".cino, .encs")).map((el) => el.parentNode.textContent)).map((text) => filterChineseAndPunctuation(text)).map((text) => trimNonChineseChars(text)).map((text) => text.replace(";", "\uFF1B")).join("\uFF1B") || (0, import_obsidian8.htmlToMarkdown)(jnr.textContent);
        const content = `${word}\`/${pinyin}/\`\uFF1A${meanings}\u3002`;
        const filepath = "\u8BCD\u8BED/" + word + ".md";
        let file = this.app.vault.getFileByPath(filepath);
        if (file) {
          new import_obsidian8.Notice("\u8BCD\u8BED\u5DF2\u5B58\u5728");
        } else {
          file = await this.app.vault.create(filepath, content);
        }
        editor.replaceSelection(`[[${word}]]`);
        this.app.workspace.getLeaf(true).openFile(file);
      },
      async () => {
        let content = (0, import_obsidian8.htmlToMarkdown)(JSummary.textContent);
        if (!content)
          return;
        content = content.replace(/\[\d+\]/g, "");
        const filepath = "\u5361\u7247\u76D2/" + word + ".md";
        let file = this.app.vault.getFileByPath(filepath) || this.app.vault.getFileByPath("\u5361\u7247\u76D2/\u5F52\u6863/" + word + ".md");
        if (file) {
          new import_obsidian8.Notice("\u5361\u7247\u7B14\u8BB0\u5DF2\u5B58\u5728");
        } else {
          file = await this.app.vault.create(filepath, content);
        }
        editor.replaceSelection(`[[${word}]]`);
        this.app.workspace.getLeaf(true).openFile(file);
      }
    ).open();
  }
  passwordCreator() {
    if (!this.settings.passwordCreator)
      return;
    const pass = pick(this.settings.passwordCreatorMixedContent.split(""), this.settings.passwordCreatorLength).join("");
    window.navigator.clipboard.writeText(pass);
    new import_obsidian8.Notice("\u5BC6\u7801\u5DF2\u590D\u5236\u81F3\u526A\u5207\u677F\uFF01");
  }
  async footnoteRenumbering(file) {
    if (!this.settings.footnoteRenumbering)
      return;
    let context = await this.app.vault.read(file);
    let i1 = 1;
    let i2 = 1;
    context = context.replace(/\[\^(\d+)\][^:]/g, function(a) {
      return a.replace(/\d+/, String(i1++));
    }).replace(/\[\^(\d+)\]:/g, function(a) {
      return a.replace(/\d+/, String(i2++));
    });
    await this.app.vault.modify(file, context);
    new import_obsidian8.Notice(`\u5DF2\u4E3A${i1 - 1}\u4E2A\u811A\u6CE8\u91CD\u65B0\u7F16\u53F7`);
  }
  polysemy(file) {
    var _a;
    if (!this.settings.polysemy)
      return;
    const to = this.getMetadata(file, "to");
    if (!to)
      return;
    let filename = (_a = to.match(/\[\[(.*)\]\]/)) == null ? void 0 : _a[1];
    if (!filename)
      return;
    let targetFile = this.getFileByShort(filename);
    if (!targetFile)
      return;
    const LastOpenFiles = this.app.workspace.getLastOpenFiles();
    if (LastOpenFiles[1] === file.path)
      return;
    const view = this.app.workspace.getLeaf(true);
    view.openFile(targetFile);
    new import_obsidian8.Notice(`\u300A${file.basename}\u300B\u662F\u4E00\u7BC7\u591A\u4E49\u7B14\u8BB0\uFF0C\u5DF2\u8F6C\u8DF3\u81F3\u300A${filename}\u300B `);
  }
  flip(file, over = false) {
    if (!this.settings.flip || !this.hasReadingPage(file))
      return;
    const el = $(SOURCE_VIEW_CLASS);
    el.scrollTop = over ? el.scrollTop - el.clientHeight - this.settings.fileCorrect : el.scrollTop + el.clientHeight + this.settings.fileCorrect;
    this.debounceReadDataTracking(el, file);
  }
  updateFrontmatter(file, key, value) {
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      frontmatter[key] = value;
    });
  }
  updateMetadata(file, outlinks, highlights, thinks) {
    this.updateFrontmatter(file, "outlinks", outlinks);
    this.updateFrontmatter(file, "highlights", highlights);
    this.updateFrontmatter(file, "thinks", thinks);
  }
  getView() {
    return this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
  }
  getEditor() {
    var _a;
    return (_a = this.getView()) == null ? void 0 : _a.editor;
  }
  getFileByShort(filename) {
    return this.app.vault.getMarkdownFiles().find(({ basename, path, extension }) => basename === filename || path.replace("." + extension, "") === filename);
  }
  getMetadata(file, key) {
    var _a, _b;
    return (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b[key];
  }
  hasReadingPage(file) {
    return file && file.extension === "md" && this.hasTag(file, "book") && this.hasRootFolder(file, this.settings.readDataTrackingFolder) && this.getView().getMode() === "source";
  }
  hasRootFolder(file, folderName) {
    const args = file.path.split("/");
    return args.length > 1 && args.shift() === folderName;
  }
  hasTag(file, name) {
    var _a, _b;
    let tags = ((_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.tags) || [];
    Array.isArray(tags) || (tags = [tags]);
    return tags.includes(name);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

js-md5/src/md5.js:
  (**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.8.3
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2023
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
